import type * as core from '@applitools/core';
import { type Logger } from '@applitools/logger';
import { RunnerOptions, RunnerOptionsFluent } from './input/RunnerOptions';
import { TestResultsSummaryData } from './output/TestResultsSummary';
import { Eyes } from './Eyes';
declare type EyesRunnerSpec<TDriver = unknown, TElement = unknown, TSelector = unknown> = core.Core<TDriver, TElement, TSelector>;
export declare abstract class EyesRunner {
    protected _spec: EyesRunnerSpec<unknown, unknown, unknown>;
    private _manager;
    private _eyes;
    /** @internal */
    abstract get config(): any;
    /** @internal */
    attach<TDriver, TElement, TSelector>(eyes: Eyes<TDriver, TElement, TSelector>, spec: EyesRunnerSpec<TDriver, TElement, TSelector>): void;
    /** @internal */
    openEyes<TDriver, TElement, TSelector>(options: {
        target: TDriver;
        config?: core.Config<TElement, TSelector, 'classic' | 'ufg'>;
        logger?: Logger;
        on?: (name: string, data?: Record<string, any>) => void;
    }): Promise<core.Eyes<TDriver, TElement, TSelector, 'classic' | 'ufg'>>;
    getAllTestResults(throwErr?: boolean): Promise<TestResultsSummaryData>;
}
export declare class VisualGridRunner extends EyesRunner {
    private _testConcurrency;
    private _legacyConcurrency;
    constructor(options?: RunnerOptions);
    /** @deprecated */
    constructor(options?: RunnerOptionsFluent);
    /** @deprecated */
    constructor(legacyConcurrency?: number);
    /** @internal */
    get config(): {
        type: string;
        concurrency: number;
        legacyConcurrency: number;
    };
    get testConcurrency(): number;
    /** @deprecated */
    get legacyConcurrency(): number;
    /** @deprecated */
    getConcurrentSessions(): number;
}
export declare class ClassicRunner extends EyesRunner {
    /** @internal */
    get config(): {
        type: string;
    };
}
export {};
