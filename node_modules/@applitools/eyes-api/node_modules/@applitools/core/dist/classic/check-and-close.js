"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCheckAndClose = void 0;
const driver_1 = require("@applitools/driver");
const take_screenshot_1 = require("../automation/utils/take-screenshot");
const take_dom_capture_1 = require("./utils/take-dom-capture");
const transform_check_settings_1 = require("./utils/transform-check-settings");
const wait_for_lazy_load_1 = require("../utils/wait-for-lazy-load");
const utils = __importStar(require("@applitools/utils"));
function makeCheckAndClose({ spec, eyes, target: defaultTarget, logger: defaultLogger, }) {
    return async function checkAndClose({ target = defaultTarget, settings, logger = defaultLogger, } = {}) {
        logger.log('Command "checkAndClose" is called with settings', settings);
        if (!spec.isDriver(target)) {
            return eyes.checkAndClose({ target, settings: settings, logger });
        }
        // TODO driver custom config
        const driver = await (0, driver_1.makeDriver)({ spec, driver: target, logger });
        if (settings.lazyLoad)
            await (0, wait_for_lazy_load_1.waitForLazyLoad)({ driver, settings: settings.lazyLoad !== true ? settings.lazyLoad : {}, logger });
        const screenshot = await (0, take_screenshot_1.takeScreenshot)({ driver, settings, logger });
        const baseTarget = {
            name: await driver.getTitle(),
            source: await driver.getUrl(),
            image: await screenshot.image.toPng(),
            locationInViewport: utils.geometry.location(screenshot.region),
            isTransformed: true,
        };
        const baseSettings = await (0, transform_check_settings_1.transformCheckSettings)({ context: driver.currentContext, screenshot, settings, logger });
        if (driver.isWeb && settings.sendDom) {
            if (settings.fully)
                await screenshot.scrollingElement.setAttribute('data-applitools-scroll', 'true');
            baseTarget.dom = await (0, take_dom_capture_1.takeDomCapture)({ driver, logger }).catch(() => null);
        }
        if (settings.pageId) {
            const scrollingElement = await driver.mainContext.getScrollingElement();
            const scrollingOffset = driver.isNative ? { x: 0, y: 0 } : await scrollingElement.getScrollOffset();
            baseTarget.locationInView = utils.geometry.offset(scrollingOffset, screenshot.region);
            baseTarget.fullViewSize = scrollingElement ? await scrollingElement.getContentSize() : await driver.getViewportSize();
        }
        await screenshot.restoreState();
        const results = await eyes.checkAndClose({ target: baseTarget, settings: baseSettings, logger });
        return results;
    };
}
exports.makeCheckAndClose = makeCheckAndClose;
