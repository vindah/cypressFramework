"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformCheckSettings = void 0;
const utils = __importStar(require("@applitools/utils"));
async function transformCheckSettings({ context, settings, screenshot, logger: _logger, }) {
    return {
        ...settings,
        region: undefined,
        normalization: undefined,
        ignoreRegions: await transformRegions({ regions: settings.ignoreRegions }),
        layoutRegions: await transformRegions({ regions: settings.layoutRegions }),
        contentRegions: await transformRegions({ regions: settings.contentRegions }),
        strictRegions: await transformRegions({ regions: settings.strictRegions }),
        floatingRegions: await transformRegions({ regions: settings.floatingRegions }),
        accessibilityRegions: await transformRegions({ regions: settings.accessibilityRegions }),
    };
    async function transformRegions({ regions = [], }) {
        var _a;
        const transformedRegions = [];
        for (const region of regions) {
            const { region: reference, ...options } = utils.types.has(region, 'region') ? region : { region };
            if (utils.types.has(reference, ['x', 'y', 'width', 'height'])) {
                transformedRegions.push(region);
            }
            else {
                const elements = await context.elements(reference);
                if (elements.length === 0)
                    continue;
                const contextLocationInViewport = await elements[0].context.getLocationInViewport();
                for (const element of elements) {
                    const elementRegionInViewport = utils.geometry.offset(await element.getRegion(), contextLocationInViewport);
                    const elementRegionInTarget = utils.geometry.offsetNegative(elementRegionInViewport, utils.geometry.location(screenshot.region));
                    const elementRegionIScaled = utils.geometry.scale(elementRegionInTarget, context.driver.viewportScale);
                    transformedRegions.push({
                        region: elementRegionIScaled,
                        regionId: utils.types.isString(element.commonSelector) ? element.commonSelector : (_a = element.commonSelector) === null || _a === void 0 ? void 0 : _a.selector,
                        ...options,
                    });
                }
            }
        }
        return transformedRegions;
    }
}
exports.transformCheckSettings = transformCheckSettings;
