"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executePollScript = void 0;
const core_base_1 = require("@applitools/core-base");
const utils = __importStar(require("@applitools/utils"));
async function executePollScript({ context, scripts, settings, logger, }) {
    logger.log('Executing poll script');
    let isExecutionTimedOut = false;
    const executionTimer = setTimeout(() => (isExecutionTimedOut = true), settings.executionTimeout);
    try {
        const { script, args = [] } = scripts.main;
        let response = deserialize(await context.execute(script, ...args));
        let chunks = '';
        while (!isExecutionTimedOut) {
            if (response.status === 'ERROR') {
                throw new core_base_1.CoreError(`Error during execute poll script: '${response.error}'`, {
                    reason: 'poll script',
                    error: response.error,
                });
            }
            else if (response.status === 'SUCCESS') {
                return response.value;
            }
            else if (response.status === 'SUCCESS_CHUNKED') {
                chunks += response.value;
                if (response.done)
                    return deserialize(chunks);
            }
            else if (response.status === 'WIP') {
                await utils.general.sleep(settings.pollTimeout);
            }
            logger.log('Polling...');
            const { script, args = [] } = scripts.poll;
            response = deserialize(await context.execute(script, ...args));
        }
        throw new core_base_1.CoreError('Poll script execution is timed out', { reason: 'timeout' });
    }
    finally {
        clearTimeout(executionTimer);
    }
    function deserialize(json) {
        try {
            return JSON.parse(json);
        }
        catch (err) {
            const firstChars = json.slice(0, 100);
            const lastChars = json.slice(-100);
            throw new Error(`Response is not a valid JSON string. length: ${json.length}, first 100 chars: "${firstChars}", last 100 chars: "${lastChars}". error: ${err}`);
        }
    }
}
exports.executePollScript = executePollScript;
